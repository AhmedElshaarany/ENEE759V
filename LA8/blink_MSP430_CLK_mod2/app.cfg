/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var TimestampProvider = xdc.useModule('ti.sysbios.family.msp430.TimestampProvider');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
//var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');


/* System stack size (used by ISRs and Swis) */
Program.stack = 1024;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 512;
LoggingSetup.mainLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 2048;

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
BIOS.heapSize = 0;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.loggerType = LoggingSetup.LoggerType_STOPMODE;
Clock.tickPeriod = 100000;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "Red_ledToggleClk";
clock0Params.period = 5;
clock0Params.startFlag = true;
Program.global.Red_ledToggleClk = Clock.create("&Red_ledToggle_ISR", 5, clock0Params);
TimestampProvider.useClockTimer = false;
TimestampProvider.clockSource = TimestampProvider.Source_SMCLK;
var clock1Params = new Clock.Params();
clock1Params.instance.name = "Green_ledToggleClk";
clock1Params.period = 3;
clock1Params.startFlag = true;
Program.global.Green_ledToggleClk = Clock.create("&Green_ledToggle_ISR", 3, clock1Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "Red_LEDSwi";
swi0Params.priority = 1;
Program.global.Red_LEDSwi = Swi.create("&Red_ledToggle", swi0Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "Green_LEDSwi";
swi1Params.priority = 1;
Program.global.Green_LEDSwi = Swi.create("&Green_ledToggle", swi1Params);
